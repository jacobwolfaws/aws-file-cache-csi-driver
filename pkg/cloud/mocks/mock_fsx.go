// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-file-cache-csi-driver/pkg/cloud (interfaces: FSx)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	fsx "github.com/aws/aws-sdk-go/service/fsx"
	gomock "github.com/golang/mock/gomock"
)

// MockFSx is a mock of FSx interface.
type MockFSx struct {
	ctrl     *gomock.Controller
	recorder *MockFSxMockRecorder
}

// MockFSxMockRecorder is the mock recorder for MockFSx.
type MockFSxMockRecorder struct {
	mock *MockFSx
}

// NewMockFSx creates a new mock instance.
func NewMockFSx(ctrl *gomock.Controller) *MockFSx {
	mock := &MockFSx{ctrl: ctrl}
	mock.recorder = &MockFSxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFSx) EXPECT() *MockFSxMockRecorder {
	return m.recorder
}

// CreateFileCacheWithContext mocks base method.
func (m *MockFSx) CreateFileCacheWithContext(arg0 context.Context, arg1 *fsx.CreateFileCacheInput, arg2 ...request.Option) (*fsx.CreateFileCacheOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFileCacheWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.CreateFileCacheOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileCacheWithContext indicates an expected call of CreateFileCacheWithContext.
func (mr *MockFSxMockRecorder) CreateFileCacheWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileCacheWithContext", reflect.TypeOf((*MockFSx)(nil).CreateFileCacheWithContext), varargs...)
}

// DeleteFileCacheWithContext mocks base method.
func (m *MockFSx) DeleteFileCacheWithContext(arg0 context.Context, arg1 *fsx.DeleteFileCacheInput, arg2 ...request.Option) (*fsx.DeleteFileCacheOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFileCacheWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DeleteFileCacheOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFileCacheWithContext indicates an expected call of DeleteFileCacheWithContext.
func (mr *MockFSxMockRecorder) DeleteFileCacheWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileCacheWithContext", reflect.TypeOf((*MockFSx)(nil).DeleteFileCacheWithContext), varargs...)
}

// DescribeFileCachesWithContext mocks base method.
func (m *MockFSx) DescribeFileCachesWithContext(arg0 context.Context, arg1 *fsx.DescribeFileCachesInput, arg2 ...request.Option) (*fsx.DescribeFileCachesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFileCachesWithContext", varargs...)
	ret0, _ := ret[0].(*fsx.DescribeFileCachesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileCachesWithContext indicates an expected call of DescribeFileCachesWithContext.
func (mr *MockFSxMockRecorder) DescribeFileCachesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileCachesWithContext", reflect.TypeOf((*MockFSx)(nil).DescribeFileCachesWithContext), varargs...)
}
