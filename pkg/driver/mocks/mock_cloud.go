// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-file-cache-csi-driver/pkg/cloud (interfaces: Cloud)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cloud "sigs.k8s.io/aws-file-cache-csi-driver/pkg/cloud"
)

// MockCloud is a mock of Cloud interface.
type MockCloud struct {
	ctrl     *gomock.Controller
	recorder *MockCloudMockRecorder
}

// MockCloudMockRecorder is the mock recorder for MockCloud.
type MockCloudMockRecorder struct {
	mock *MockCloud
}

// NewMockCloud creates a new mock instance.
func NewMockCloud(ctrl *gomock.Controller) *MockCloud {
	mock := &MockCloud{ctrl: ctrl}
	mock.recorder = &MockCloudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloud) EXPECT() *MockCloudMockRecorder {
	return m.recorder
}

// CreateFileCache mocks base method.
func (m *MockCloud) CreateFileCache(arg0 context.Context, arg1 string, arg2 *cloud.FileCacheOptions) (*cloud.FileCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileCache", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cloud.FileCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileCache indicates an expected call of CreateFileCache.
func (mr *MockCloudMockRecorder) CreateFileCache(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileCache", reflect.TypeOf((*MockCloud)(nil).CreateFileCache), arg0, arg1, arg2)
}

// DeleteFileCache mocks base method.
func (m *MockCloud) DeleteFileCache(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileCache indicates an expected call of DeleteFileCache.
func (mr *MockCloudMockRecorder) DeleteFileCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileCache", reflect.TypeOf((*MockCloud)(nil).DeleteFileCache), arg0, arg1)
}

// DescribeFileCache mocks base method.
func (m *MockCloud) DescribeFileCache(arg0 context.Context, arg1 string) (*cloud.FileCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileCache", arg0, arg1)
	ret0, _ := ret[0].(*cloud.FileCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileCache indicates an expected call of DescribeFileCache.
func (mr *MockCloudMockRecorder) DescribeFileCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileCache", reflect.TypeOf((*MockCloud)(nil).DescribeFileCache), arg0, arg1)
}

// WaitForFileCacheAvailable mocks base method.
func (m *MockCloud) WaitForFileCacheAvailable(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForFileCacheAvailable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForFileCacheAvailable indicates an expected call of WaitForFileCacheAvailable.
func (mr *MockCloudMockRecorder) WaitForFileCacheAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForFileCacheAvailable", reflect.TypeOf((*MockCloud)(nil).WaitForFileCacheAvailable), arg0, arg1)
}
